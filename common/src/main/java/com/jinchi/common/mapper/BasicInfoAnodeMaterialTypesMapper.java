package com.jinchi.common.mapper;

import com.jinchi.common.domain.BasicInfoAnodeMaterialTypes;
import com.jinchi.common.domain.BasicInfoAnodeMaterialTypesExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;
@Mapper
@Component
public interface BasicInfoAnodeMaterialTypesMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int countByExample(BasicInfoAnodeMaterialTypesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int deleteByExample(BasicInfoAnodeMaterialTypesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    @Delete({
        "delete from basic_info_anode_material_types",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    @Insert({
        "insert into basic_info_anode_material_types (material_name, data_type, ",
        "process_code, flag)",
        "values (#{materialName,jdbcType=VARCHAR}, #{dataType,jdbcType=TINYINT}, ",
        "#{processCode,jdbcType=INTEGER}, #{flag,jdbcType=BIT})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="code", before=false, resultType=Integer.class)
    int insert(BasicInfoAnodeMaterialTypes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int insertSelective(BasicInfoAnodeMaterialTypes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    List<BasicInfoAnodeMaterialTypes> selectByExample(BasicInfoAnodeMaterialTypesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, material_name, data_type, process_code, flag",
        "from basic_info_anode_material_types",
        "where code = #{code,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    BasicInfoAnodeMaterialTypes selectByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") BasicInfoAnodeMaterialTypes record, @Param("example") BasicInfoAnodeMaterialTypesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") BasicInfoAnodeMaterialTypes record, @Param("example") BasicInfoAnodeMaterialTypesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(BasicInfoAnodeMaterialTypes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_anode_material_types
     *
     * @mbggenerated
     */
    @Update({
        "update basic_info_anode_material_types",
        "set material_name = #{materialName,jdbcType=VARCHAR},",
          "data_type = #{dataType,jdbcType=TINYINT},",
          "process_code = #{processCode,jdbcType=INTEGER},",
          "flag = #{flag,jdbcType=BIT}",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(BasicInfoAnodeMaterialTypes record);
}