package com.jinchi.common.mapper;

import com.jinchi.common.domain.BasicInfoPrecursorProcessType;
import com.jinchi.common.domain.BasicInfoPrecursorProcessTypeExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;
@Mapper
@Component
public interface BasicInfoPrecursorProcessTypeMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int countByExample(BasicInfoPrecursorProcessTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int deleteByExample(BasicInfoPrecursorProcessTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    @Delete({
        "delete from basic_info_precursor_process_type",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    @Insert({
        "insert into basic_info_precursor_process_type (code, process_name, ",
        "types)",
        "values (#{code,jdbcType=INTEGER}, #{processName,jdbcType=VARCHAR}, ",
        "#{types,jdbcType=TINYINT})"
    })
    int insert(BasicInfoPrecursorProcessType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int insertSelective(BasicInfoPrecursorProcessType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    List<BasicInfoPrecursorProcessType> selectByExample(BasicInfoPrecursorProcessTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, process_name, types",
        "from basic_info_precursor_process_type",
        "where code = #{code,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    BasicInfoPrecursorProcessType selectByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") BasicInfoPrecursorProcessType record, @Param("example") BasicInfoPrecursorProcessTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") BasicInfoPrecursorProcessType record, @Param("example") BasicInfoPrecursorProcessTypeExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(BasicInfoPrecursorProcessType record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_precursor_process_type
     *
     * @mbggenerated
     */
    @Update({
        "update basic_info_precursor_process_type",
        "set process_name = #{processName,jdbcType=VARCHAR},",
          "types = #{types,jdbcType=TINYINT}",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(BasicInfoPrecursorProcessType record);
}