package com.jinchi.common.mapper;

import com.jinchi.common.domain.ProductionBatchInfo;
import com.jinchi.common.domain.ProductionBatchInfoExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;
@Component
@Mapper
public interface ProductionBatchInfoMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int countByExample(ProductionBatchInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int deleteByExample(ProductionBatchInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    @Delete({
        "delete from production_batch_info",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    @Insert({
        "insert into production_batch_info (year, production_type, ",
        "month, serial_number, ",
        "production_model, production_line, ",
        "material, process, ",
        "slotnum, cell_num, ",
        "timepoint, batch, ",
        "set_people, set_time, ",
        "modify_people, modify_time, ",
        "start_time, end_time, ",
        "status_flag, edit_flag, batch_flag, ",
        "delete_flag)",
        "values (#{year,jdbcType=VARCHAR}, #{productionType,jdbcType=VARCHAR}, ",
        "#{month,jdbcType=VARCHAR}, #{serialNumber,jdbcType=VARCHAR}, ",
        "#{productionModel,jdbcType=VARCHAR}, #{productionLine,jdbcType=VARCHAR}, ",
        "#{material,jdbcType=VARCHAR}, #{process,jdbcType=VARCHAR}, ",
        "#{slotnum,jdbcType=VARCHAR}, #{cellNum,jdbcType=VARCHAR}, ",
        "#{timepoint,jdbcType=VARCHAR}, #{batch,jdbcType=VARCHAR}, ",
        "#{setPeople,jdbcType=VARCHAR}, #{setTime,jdbcType=TIMESTAMP}, ",
        "#{modifyPeople,jdbcType=INTEGER}, #{modifyTime,jdbcType=TIMESTAMP}, ",
        "#{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, ",
        "#{statusFlag,jdbcType=BIT}, #{editFlag,jdbcType=BIT}, #{batchFlag,jdbcType=BIT}, ",
        "#{deleteFlag,jdbcType=BIT})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="code", before=false, resultType=Long.class)
    int insert(ProductionBatchInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int insertSelective(ProductionBatchInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    List<ProductionBatchInfo> selectByExample(ProductionBatchInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, year, production_type, month, serial_number, production_model, production_line, ",
        "material, process, slotnum, cell_num, timepoint, batch, set_people, set_time, ",
        "modify_people, modify_time, start_time, end_time, status_flag, edit_flag, batch_flag, ",
        "delete_flag",
        "from production_batch_info",
        "where code = #{code,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    ProductionBatchInfo selectByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") ProductionBatchInfo record, @Param("example") ProductionBatchInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") ProductionBatchInfo record, @Param("example") ProductionBatchInfoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(ProductionBatchInfo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_info
     *
     * @mbggenerated
     */
    @Update({
        "update production_batch_info",
        "set year = #{year,jdbcType=VARCHAR},",
          "production_type = #{productionType,jdbcType=VARCHAR},",
          "month = #{month,jdbcType=VARCHAR},",
          "serial_number = #{serialNumber,jdbcType=VARCHAR},",
          "production_model = #{productionModel,jdbcType=VARCHAR},",
          "production_line = #{productionLine,jdbcType=VARCHAR},",
          "material = #{material,jdbcType=VARCHAR},",
          "process = #{process,jdbcType=VARCHAR},",
          "slotnum = #{slotnum,jdbcType=VARCHAR},",
          "cell_num = #{cellNum,jdbcType=VARCHAR},",
          "timepoint = #{timepoint,jdbcType=VARCHAR},",
          "batch = #{batch,jdbcType=VARCHAR},",
          "set_people = #{setPeople,jdbcType=VARCHAR},",
          "set_time = #{setTime,jdbcType=TIMESTAMP},",
          "modify_people = #{modifyPeople,jdbcType=INTEGER},",
          "modify_time = #{modifyTime,jdbcType=TIMESTAMP},",
          "start_time = #{startTime,jdbcType=TIMESTAMP},",
          "end_time = #{endTime,jdbcType=TIMESTAMP},",
          "status_flag = #{statusFlag,jdbcType=BIT},",
          "edit_flag = #{editFlag,jdbcType=BIT},",
          "batch_flag = #{batchFlag,jdbcType=BIT},",
          "delete_flag = #{deleteFlag,jdbcType=BIT}",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(ProductionBatchInfo record);

    List selectByConditions(@Param("sql") String sql);
}