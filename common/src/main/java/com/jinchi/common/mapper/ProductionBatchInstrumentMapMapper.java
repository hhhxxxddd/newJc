package com.jinchi.common.mapper;

import com.jinchi.common.domain.ProductionBatchInstrumentMap;
import com.jinchi.common.domain.ProductionBatchInstrumentMapExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;
@Component
@Mapper
public interface ProductionBatchInstrumentMapMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int countByExample(ProductionBatchInstrumentMapExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int deleteByExample(ProductionBatchInstrumentMapExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    @Delete({
        "delete from production_batch_instrument_map",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    @Insert({
        "insert into production_batch_instrument_map (batch_code, batch, ",
        "instrument_code, cell_num, ",
        "start_time, end_time)",
        "values (#{batchCode,jdbcType=BIGINT}, #{batch,jdbcType=VARCHAR}, ",
        "#{instrumentCode,jdbcType=BIGINT}, #{cellNum,jdbcType=VARCHAR}, ",
        "#{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="code", before=false, resultType=Long.class)
    int insert(ProductionBatchInstrumentMap record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int insertSelective(ProductionBatchInstrumentMap record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    List<ProductionBatchInstrumentMap> selectByExample(ProductionBatchInstrumentMapExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, batch_code, batch, instrument_code, cell_num, start_time, end_time",
        "from production_batch_instrument_map",
        "where code = #{code,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    ProductionBatchInstrumentMap selectByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") ProductionBatchInstrumentMap record, @Param("example") ProductionBatchInstrumentMapExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") ProductionBatchInstrumentMap record, @Param("example") ProductionBatchInstrumentMapExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(ProductionBatchInstrumentMap record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table production_batch_instrument_map
     *
     * @mbggenerated
     */
    @Update({
        "update production_batch_instrument_map",
        "set batch_code = #{batchCode,jdbcType=BIGINT},",
          "batch = #{batch,jdbcType=VARCHAR},",
          "instrument_code = #{instrumentCode,jdbcType=BIGINT},",
          "cell_num = #{cellNum,jdbcType=VARCHAR},",
          "start_time = #{startTime,jdbcType=TIMESTAMP},",
          "end_time = #{endTime,jdbcType=TIMESTAMP}",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(ProductionBatchInstrumentMap record);
}