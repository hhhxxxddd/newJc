package com.jinchi.common.mapper;

import com.jinchi.common.domain.AnodeCostAccountingStatisticByLineDetail;
import com.jinchi.common.domain.AnodeCostAccountingStatisticByLineDetailExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;

@Mapper
@Component
public interface AnodeCostAccountingStatisticByLineDetailMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int countByExample(AnodeCostAccountingStatisticByLineDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int deleteByExample(AnodeCostAccountingStatisticByLineDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    @Delete({
        "delete from anode_cost_accounting_statistic_by_line_detail",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    @Insert({
        "insert into anode_cost_accounting_statistic_by_line_detail (statistic_code, periods, ",
        "line_coed, type_code, ",
        "material_requisitions, material_balance, ",
        "last_material_in_process_first, current_goods_in_process_first, ",
        "last_goods_in_process_second, current_goods_in_process_second, ",
        "unit_consumption_precursor, unit_consumption_neurolithium, ",
        "product_storage)",
        "values (#{statisticCode,jdbcType=BIGINT}, #{periods,jdbcType=INTEGER}, ",
        "#{lineCoed,jdbcType=INTEGER}, #{typeCode,jdbcType=INTEGER}, ",
        "#{materialRequisitions,jdbcType=REAL}, #{materialBalance,jdbcType=REAL}, ",
        "#{lastMaterialInProcessFirst,jdbcType=REAL}, #{currentGoodsInProcessFirst,jdbcType=REAL}, ",
        "#{lastGoodsInProcessSecond,jdbcType=REAL}, #{currentGoodsInProcessSecond,jdbcType=REAL}, ",
        "#{unitConsumptionPrecursor,jdbcType=REAL}, #{unitConsumptionNeurolithium,jdbcType=REAL}, ",
        "#{productStorage,jdbcType=REAL})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="code", before=false, resultType=Long.class)
    int insert(AnodeCostAccountingStatisticByLineDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int insertSelective(AnodeCostAccountingStatisticByLineDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    List<AnodeCostAccountingStatisticByLineDetail> selectByExample(AnodeCostAccountingStatisticByLineDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, statistic_code, periods, line_coed, type_code, material_requisitions, ",
        "material_balance, last_material_in_process_first, current_goods_in_process_first, ",
        "last_goods_in_process_second, current_goods_in_process_second, unit_consumption_precursor, ",
        "unit_consumption_neurolithium, product_storage",
        "from anode_cost_accounting_statistic_by_line_detail",
        "where code = #{code,jdbcType=BIGINT}"
    })
    @ResultMap("BaseResultMap")
    AnodeCostAccountingStatisticByLineDetail selectByPrimaryKey(Long code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") AnodeCostAccountingStatisticByLineDetail record, @Param("example") AnodeCostAccountingStatisticByLineDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") AnodeCostAccountingStatisticByLineDetail record, @Param("example") AnodeCostAccountingStatisticByLineDetailExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(AnodeCostAccountingStatisticByLineDetail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table anode_cost_accounting_statistic_by_line_detail
     *
     * @mbggenerated
     */
    @Update({
        "update anode_cost_accounting_statistic_by_line_detail",
        "set statistic_code = #{statisticCode,jdbcType=BIGINT},",
          "periods = #{periods,jdbcType=INTEGER},",
          "line_coed = #{lineCoed,jdbcType=INTEGER},",
          "type_code = #{typeCode,jdbcType=INTEGER},",
          "material_requisitions = #{materialRequisitions,jdbcType=REAL},",
          "material_balance = #{materialBalance,jdbcType=REAL},",
          "last_material_in_process_first = #{lastMaterialInProcessFirst,jdbcType=REAL},",
          "current_goods_in_process_first = #{currentGoodsInProcessFirst,jdbcType=REAL},",
          "last_goods_in_process_second = #{lastGoodsInProcessSecond,jdbcType=REAL},",
          "current_goods_in_process_second = #{currentGoodsInProcessSecond,jdbcType=REAL},",
          "unit_consumption_precursor = #{unitConsumptionPrecursor,jdbcType=REAL},",
          "unit_consumption_neurolithium = #{unitConsumptionNeurolithium,jdbcType=REAL},",
          "product_storage = #{productStorage,jdbcType=REAL}",
        "where code = #{code,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(AnodeCostAccountingStatisticByLineDetail record);
}