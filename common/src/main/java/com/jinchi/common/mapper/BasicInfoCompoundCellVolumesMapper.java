package com.jinchi.common.mapper;

import com.jinchi.common.domain.BasicInfoCompoundCellVolumes;
import com.jinchi.common.domain.BasicInfoCompoundCellVolumesExample;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Component;

import java.util.List;
@Mapper
@Component
public interface BasicInfoCompoundCellVolumesMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int countByExample(BasicInfoCompoundCellVolumesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int deleteByExample(BasicInfoCompoundCellVolumesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    @Delete({
        "delete from basic_info_compound_cell_volumes",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    @Insert({
        "insert into basic_info_compound_cell_volumes (line_code, material_code, ",
        "material_name, volumes_value)",
        "values (#{lineCode,jdbcType=INTEGER}, #{materialCode,jdbcType=INTEGER}, ",
        "#{materialName,jdbcType=VARCHAR}, #{volumesValue,jdbcType=REAL})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="code", before=false, resultType=Integer.class)
    int insert(BasicInfoCompoundCellVolumes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int insertSelective(BasicInfoCompoundCellVolumes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    List<BasicInfoCompoundCellVolumes> selectByExample(BasicInfoCompoundCellVolumesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "code, line_code, material_code, material_name, volumes_value",
        "from basic_info_compound_cell_volumes",
        "where code = #{code,jdbcType=INTEGER}"
    })
    @ResultMap("BaseResultMap")
    BasicInfoCompoundCellVolumes selectByPrimaryKey(Integer code);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int updateByExampleSelective(@Param("record") BasicInfoCompoundCellVolumes record, @Param("example") BasicInfoCompoundCellVolumesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int updateByExample(@Param("record") BasicInfoCompoundCellVolumes record, @Param("example") BasicInfoCompoundCellVolumesExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(BasicInfoCompoundCellVolumes record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table basic_info_compound_cell_volumes
     *
     * @mbggenerated
     */
    @Update({
        "update basic_info_compound_cell_volumes",
        "set line_code = #{lineCode,jdbcType=INTEGER},",
          "material_code = #{materialCode,jdbcType=INTEGER},",
          "material_name = #{materialName,jdbcType=VARCHAR},",
          "volumes_value = #{volumesValue,jdbcType=REAL}",
        "where code = #{code,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(BasicInfoCompoundCellVolumes record);
}